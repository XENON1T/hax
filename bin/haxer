#!/usr/bin/env python
import argparse
import time
import logging
import hax
from hax import minitrees, runs, slow_control

parser = argparse.ArgumentParser(description="Make minitrees from pax root files.")

parser.add_argument('--daemon', action='store_true', default=False,
                    help='Run in the background, creating minitrees for all datasets as they appear.')
parser.add_argument('--version', action='store_true', default=False,
                    help='Just print the hax version.')

parser.add_argument('--input', nargs='*',
                    help="Runs/datasets to read. Can be run names or run numbers. .root suffixes are removed.\n"
                         "If not specified, will go through all runs for which we can find the processed data.")
parser.add_argument('--sleeptime', default=60, type=float,
                    help="In daemon mode, sleep for this many seconds before asking for new runs again.")

parser.add_argument('--main_data_paths',nargs='*',
                    help="Directory/ies to look for main data root files.")
parser.add_argument('--treemakers', nargs='+', default=tuple(['Fundamentals', 'Basics']),
                    help="Space-separated lists of types of minitrees to make.")
parser.add_argument('--force_reload', action='store_true', default=False,
                    help="Force re-creation of mini-trees, even if they are not outdated.")
parser.add_argument('--pax_version_policy', default=None,
                    help="Pax version policy to use. See https://github.com/XENON1T/hax/pull/30.")
parser.add_argument('--preferred_minitree_format', default=None,
                    help="Minitree file format to prefer. If not given, the default format set in hax.ini will be used")
parser.add_argument('--event', type=int, nargs='+', default=None,
                    help="List of events to process (space separated)")

args = parser.parse_args()

if args.version:
    print(hax.__version__)
    exit()

# Load hax.init override options set on command line, then init hax
options = dict()
option_names = ['main_data_paths', 'preferred_minitree_format', 'pax_version_policy']
for on in option_names:
    ov = getattr(args, on)
    if ov:
        options[on] = ov        
hax.init(**options)

log = logging.getLogger('haxer')
log.info("Welcome to hax version %s" % hax.__version__)
log.debug("Will search for root files in %s" % hax.config['main_data_paths'])

while True:

    if not args.input:
        # Go through all runs for which we have a location, from latest to oldest
        ds = hax.runs.datasets
        runs = ds[ds['location'] != ""]['number'].values[::-1]
    else:
        runs = [q[:-5] if q.endswith('.root') else q for q in args.input]

    log.info("Creating minitrees for runs %s" % str(runs))

    for run_id in runs:

        # Try to convert string (from command line) to number, to support --input blabla  and --input 42
        try:
            run_id = int(run_id)
        except ValueError:
            pass

        try:
            hax.minitrees.load(run_id,
                               treemakers=args.treemakers,
                               force_reload=args.force_reload,
                               event_list=args.event)

        except Exception as e:
            # ROOT segfaults if we try this on a root file that is still being processed...
            print("Error creating minitrees for run %s, got exception %s: %s" % (
                run_id, type(e), str(e)))
            if args.input:
                raise e
            else:
                continue

    if args.daemon:
        log.info("Done creating minitrees, sleeping for %s seconds" % args.sleeptime)
        time.sleep(args.sleeptime)
        hax.runs.update_datasets()
    else:
        break
