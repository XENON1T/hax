##
# General / Fallback settings
##

[DEFAULT]

# Experiment to analyze data for: XENON100 (pax reprocessed) or XENON1T
experiment = 'XENON1T'
detector = 'tpc'
log_level = 'INFO'

# If False, will not load any datasets from runs database. Use when (for some reason) you can't access MongoDB
use_runs_db = True

##
# Minitree options
##

# Branches which are activated by default in loop_over_dataset(s) and every mini-tree maker
basic_branches = ['event_number', 'start_time', 'stop_time',
                  's1s', 's2s',
                  'peaks.area', 'peaks.type', 'peaks.area_fraction_top', 'peaks.detector',
                  'peaks.range_area_decile[11]',
                  'interactions.s1', 'interactions.s2',
                  'interactions.s1_area_correction', 'interactions.s2_area_correction',
                  'interactions.x', 'interactions.y', 'interactions.z', 'interactions.drift_time']

# Remake all minitrees with hax version lower than this:
minimum_minitree_hax_version = '0.5.0'

# Progress bar on or off during minitree creation. Set to False for off
tqdm_on = True

# Print out selection/cut passthrough messages from hax.cuts by default?
print_passthrough_info = True

# Directories that will be searched for mini-trees, starting from the first.
# The first (highest-priority) directory will be used for the creation of new minitrees.
minitree_paths = ['.', hax_dir + '/minitrees']

# Cache newly made minitrees to disk. If False, will just make dataframes
minitree_caching = True

# Make minitrees if they don't exist. If False, will just load them from disk.
make_minitrees = True

# Format of minitrees that will be used for saving new minitrees and that will be searched for first
# Can be 'pklz' (for compressed pickles) or 'root'
preferred_minitree_format = 'root'

# Other minitree formats to check for. It's ok to re-list your preferred format here, it will be ignored.

other_minitree_formats = ['root', 'pklz']

# Corrections to load on init
corrections = ['hax_electron_lifetime']

##
# Processed data access options
##

# If 'latest', use only data processed with the latest available pax version for each dataset
# If a version number (e.g. 4.10.2), use only data processed with that pax version.
pax_version_policy = 'latest'

# Runs database url for XENON1T, password will be fetched from os.environ['MONGO_PASSWORD'] if possible
runs_url = 'mongodb://pax:{password}@copslx50.fysik.su.se:27017/run'

# Database and collection to use for connecting with runs db
runs_database = 'run'
runs_collection = 'runs_new'

# Should we get the processed data locations from the runs db?
# Set to False if you want to use only root files from main_data_paths (e.g. to get files from a particular version)
use_rundb_locations = False

# Key to identify this host in cax
# The 'host' field for the data entries in the run doc should include this key (exact match is not needed)
cax_key = 'sorry_I_dont_have_one'

# Paths that will be searched for the main processed data .root files
# Run db locations have priority, unless use_rundb_locations = False.
# First path will be searched first, we go down if the file is not found
main_data_paths = ['.', './data']


##
# Raw data access options
##

raw_data_local_path = ['.']

##
# Special access paths for metadata (site-specific)
##
acquisition_monitor_special_path = None
trigger_data_special_path = None

##
# Blinding cut
# We're blinding NR band (1st term; see #168), 2 e- capture from 50-80 keV (2nd term; see #161), and 0nbb 2.3-2.6 MeV (3rd term)
# Details of NR band blinding (open regions): (LowE above ER -2*RMS) | (above Kr83m -3*RMS)
#                                            | (HighE above ER const line) | (HighE below NR -4.5sigma)
#                                            | (sideband outside TPC radius; see #169)
##
blinding_cut  = '(((log(cs2_bottom/cs1)/log(10) > 0.466119*exp(-cs1/47.9903) + 1.31033 -0.000314047*cs1 + 1.33977/cs1)&(cs1<252)) | ((250<cs1)&(cs1<375)&(log(cs2_bottom/cs1)/log(10) > 0.822161*exp(-(cs1-207.702)/343.275) + 0.515139)) | ((cs1>375)&(log(cs2_bottom/cs1)/log(10) > 1.02015)) | (cs1>200)&(log(cs2_bottom/cs1)/log(10) < 1.21239 + -0.0016025*cs1 + -1.97495/cs1) | ((cs1<500)&(r_3d_nn>47.9)) | (cs1>3000) | (s2<150) | (largest_other_s2>200)) & ((0.0137*(cs1/.1429 + cs2_bottom/11.36) < 50.) | (0.0137*(cs1/.1429 + cs2_bottom/11.36) > 80.)) & ((0.0137*(cs1/.1429 + cs2_bottom/11.36) < 2300.) | (0.0137*(cs1/.1429 + cs2_bottom/11.36) > 2600.))'
blind_from_run = 3936

##
# Slow control access options
##
sc_variable_list = hax_dir + '/sc_variables.csv'

sc_api_url = 'https://xenon1t-daq.lngs.infn.it/slowcontrol/GetSCData'
sc_api_username = 'slowcontrolwebserver'

##
# Corrections Definitions
##
# The electron lifetime is pulled from a remote database
# File-based corrections defined here. Run ranges are inclusive
corrections_definitions = {
    "s2_xy_map": [
        {"run_min": 0, "run_max": 6385, "correction": "s2_xy_XENON1T_24Feb2017.json"},
        {"run_min": 6386, "correction": "s2_xy_map_v2.2.json"}
    ],
    "fdc_2d": [
        {"run_min": 0, "run_max": 6385, "correction": "fdc-AdCorrTPF.json.gz"},
        {"run_min": 6386, "correction": "FDC-SR1_AdCorrTPF.json.gz"}
    ],
    "fdc_3d": [
        {"run_min": 0, "run_max": 6385, "correction": "FDC_SR0_data_driven_3d_correction_v0.json.gz"},
        {"run_min": 6386, "run_max": 8245, "correction": "FDC_SR1_data_driven_time_dependent_3d_correction_part1_v1.json.gz"},
        {"run_min": 8246, "run_max": 10222, "correction": "FDC_SR1_data_driven_time_dependent_3d_correction_part2_v1.json.gz"},
        {"run_min": 10223, "run_max": 12089, "correction": "FDC_SR1_data_driven_time_dependent_3d_correction_part3_v1.json.gz"},
        {"run_min": 12090, "correction": "FDC_SR1_data_driven_time_dependent_3d_correction_part4_v1.json.gz"}
    ],
    "fdc_3d_tfnn": [
        {"run_min": 0, "run_max": 6385, "correction": "FDC_SR0_data_driven_3d_correction_tf_nn_v0.json.gz"},
        {"run_min": 6386, "run_max": 8648, "correction": "FDC_SR1_data_driven_time_dependent_3d_correction_tf_nn_part1_v1.json.gz"},
        {"run_min": 8649, "run_max": 10976, "correction": "FDC_SR1_data_driven_time_dependent_3d_correction_tf_nn_part2_v1.json.gz"},
        {"run_min": 10977, "run_max": 13195, "correction": "FDC_SR1_data_driven_time_dependent_3d_correction_tf_nn_part3_v1.json.gz"},
        {"run_min": 13196, "correction": "FDC_SR1_data_driven_time_dependent_3d_correction_tf_nn_part4_v1.json.gz"}
    ],
    "s1_lce_map_tpf_fdc_2d": [
        {"run_min": 0, "run_max": 6385,
         "correction": "s1_xyz_XENON1T_kr83m-nov_pax-642_fdc-AdCorrTPF.json"},
        {"run_min": 6386, "correction": "s1_xyz_XENON1T_kr83m-sr1_pax-664_fdc-adcorrtpf.json"}
    ],
    "s1_lce_map_nn_fdc_3d": [
        {"run_min": 0, "correction": "s1-lce_kr83m-sr0_pax-680_fdc-3d_v0.json"},
        {"run_min": 6386, "correction": "s1-lce_kr83m-sr1_pax-680_fdc-3d_v0.json"}
    ],
    "mc_electron_lifetime_liquid": [
        {"run_min": 0, "run_max": 6385, "correction": 450},
        {"run_min": 6386, "correction": 550}
    ],
    "s1_aft_map": [
        {"run_min": 0, "correction": "s1_aft_xyz_XENON1T_20170808.json"}
    ],
    "tfnn_weights": [
        {"run_min": 0, "run_max": 6385, "correction": "tensorflow_nn_pos_weights_XENON1T_20171217_sr0.h5"},
        {"run_min": 6386, "correction": "tensorflow_nn_pos_weights_XENON1T_20171217_sr1.h5"}
    ],
    "tfnn_model": [
	{"run_min": 0, "run_max": 6385, "correction": "tensorflow_nn_pos_XENON1T_20171217_sr0.json"},
	{"run_min": 6386, "correction": "tensorflow_nn_pos_XENON1T_20171217_sr1.json"}
    ]}

##
# Legacy options
##

# Runs information path for XENON100
runs_info_dir = hax_dir + '/runs_info'

# If you're reading in old pax files, use this to specify which version of the event class to load
# For newer pax classes, the class is included with the root file.
old_pax_class_version = 430

# Directory with .cpp files of old pax classes
old_pax_classes_dir = hax_dir + '/pax_classes'

# Default mode for accessing raw data: 'local' or 'grid'.
# 'grid' may work for XENON100, definitely not for XENON1T yet.
raw_data_access_mode = 'local'

# For using GRID to access raw XENON100 data: path to key & certificate for accessing raw data from GRID
grid_key = '~/.globus/userkey.nopass.pem'
grid_certificate = '~/.globus/usercert.pem'

# Base of raw data grid url. 'run_xx/dataset_name/xed_filename.xed' will be appended
raw_data_grid_url = 'https://tbn18.nikhef.nl/dpm/nikhef.nl/home/xenon.biggrid.nl/archive/data/xenon100/'


##
# Settings specific to each analysis facility
# These are triggered when the fully qualified domain name of a machine contains the section name
##

[lngs.infn.it]
cax_key = 'xe1t-datamanager'
raw_data_local_path = ['/data/xenon/raw']
main_data_paths = ['.', '/archive_lngs/common/processed']
minitree_paths = ['.', '/archive_lngs/common/minitrees']


[pdc.kth.se]
cax_key = 'tegner'
# These settings still for XENON100.. probably switch soon
main_data_paths = ['.', '/cfs/klemming/projects/xenon/common/PaxReprocessed_9/good']
minitree_paths = ['.', '/cfs/klemming/projects/xenon/common/PaxReprocessed_9/good/minitrees']


# Midway / UChicago Jupyterhub
[rcc]
cax_key = 'midway'
raw_data_local_path = ['/project/lgrandi/xenon1t/raw', '/project2/lgrandi/xenon1t/raw']
minitree_paths = ['.', '/project/lgrandi/xenon1t/minitrees/latest']

acquisition_monitor_special_path = '/project/lgrandi/xenon1t/acquisition_monitor_data/Run{run_number:06}_acqmondata.pickles'
trigger_data_special_path = '/project/lgrandi/xenon1t/trigger_monitor_data/Run{run_number:06}_trigmondata.zip'

# Stash CI-connect
[ci-connect]
cax_key = 'login'
raw_data_local_path = ['/xenon/xenon1t/raw', '/xenon/xenon1t_test']
minitree_paths = ['.', '/xenon/xenon1t_minitrees']

acquisition_monitor_special_path = '/xenon/xenon1t_acquisition_monitor_data/Run{run_number:06}_acqmondata.pickles'
trigger_data_special_path = '/xenon/xenon1t_trigger_monitor_data/Run{run_number:06}_trigmondata.zip'

# Stash JupyterHub
[xenon-jupyter]
cax_key = 'login'
raw_data_local_path = ['/xenon/xenon1t/raw', '/xenon/xenon1t_test']
minitree_paths = ['.', '/xenon/xenon1t_minitrees']

acquisition_monitor_special_path = '/xenon/xenon1t_acquisition_monitor_data/Run{run_number:06}_acqmondata.pickles'
trigger_data_special_path = '/xenon/xenon1t_trigger_monitor_data/Run{run_number:06}_trigmondata.zip'
